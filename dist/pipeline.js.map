{"version":3,"sources":["pipeline.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wDAQA,iBAAmC,OAAnC;;;;;;;;;;;;oBAAe;;;;;MAKF;;;;;;;AAMX,aANW,QAMX,OAA4B;UAAd,6BAAc;;4BANjB,UAMiB;;;;;;AAM1B,WAAK,OAAL,GAAe,sBAAE,UAAF,EAAc,OAAd,GAAwB,MAAxB,CAAgC,UAAE,YAAF,EAAgB,SAAhB,EAAgC;;AAE7E,eAAO;iBAAW,UAAU,OAAV,CAAmB,OAAnB,EAA4B;mBAAM,aAAc,OAAd;WAAN;SAAvC,CAFsE;OAAhC,EAI5C,kBAJY,CAAf,CAN0B;KAA5B;;;;;;;;iBANW;;8CAwBiD;YAAlC,8BAAkC;YAAtB,wBAAsB;YAAb,4BAAa;;;;AAG1D,YAAM,mBAAmB,WACrB;iBAAiB,UAAU,GAAV,CAAc,aAAd;SAAjB,IACA;iBAAiB,IAAI,aAAJ;SAAjB;;;AALsD,YAQpD,eAAe,iBAAE,OAAF,CAAU,UAAV,EAAsB,eAAtB,CAAf;;;AARoD,YAWpD,uBAAuB,mBAAS,KAAT,CAAgB,cAAhB,EAAgC,YAAhC,EAA+C,OAA/C,EAAvB;;;AAXoD,eAcnD,iBAAE,GAAF,CAAO,oBAAP,EAA6B,gBAA7B,CAAP,CAd0D;;;;WAxBjD","file":"pipeline.js","sourcesContent":["import _ from \"lodash\";\nimport toposort from \"toposort\";\nimport Promise from \"any-promise\";\nimport {precedesTypes,followsTypes} from \"./decorators\";\n\n/**\n* The default execute function, does nothing, serves as end of pipeline\n*/\nasync function pipelineTerminator( context ) {}\n\n/**\n* The main pipeline component\n*/\nexport class Pipeline {\n\n  /**\n  * @constructor\n  * @param {object} components          Name->type map for components in map\n  */\n  constructor({ components }) {\n\n    /**\n    * @method\n    * @param {object} context           The context object on which the pipeline operates\n    */\n    this.execute = _(components).reverse().reduce( ( innerExecute, component  ) => {\n\n      return context => component.execute( context, () => innerExecute( context ));\n\n    }, pipelineTerminator );\n\n  }\n\n  /**\n  * Creates a pipeline from a set of component types using the provided container\n  * @method\n  */\n  static createComponents({ components, factory, container }) {\n\n    // get the factory function\n    const componentFactory = factory ||\n      ( ComponentType => container.get(ComponentType)) ||\n      ( ComponentType => new ComponentType());\n\n    // get all dependencies (edge nodes)\n    const dependencies = _.flatMap(components, getDependencies );\n\n    // get the components in sorted order -- kgw!\n    const sortedComponentTypes = toposort.array( componentTypes, dependencies ).reverse();\n\n    // create all the component objects\n    return _.map( sortedComponentTypes, componentFactory );\n\n  }\n}\n"],"sourceRoot":"/source/"}